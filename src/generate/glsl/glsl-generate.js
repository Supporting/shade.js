(function (ns) {

    var Annotation = require("./../../base/annotation.js").Annotation;
    var FunctionAnnotation = require("./../../base/annotation.js").FunctionAnnotation;
    var Types = require("./../../interfaces.js").TYPES;
    var Kinds = require("./../../interfaces.js").OBJECT_KINDS;
    var walk = require('estraverse'),
        Syntax = walk.Syntax,
        VisitorOption = walk.VisitorOption;




    /**
     * @param {object} opt
     */
    var getHeader = function (opt) {
        if (opt.omitHeader == true)
            return;
        var header = [
            "// Generated by shade.js"
        ];
        var floatPrecision = opt.floatPrecision || "mediump";
        header.push("precision " + floatPrecision + " float;");
        return header;
    }

    var toGLSLType = function (info) {
        switch (info.type) {
            case Types.OBJECT:
                switch (info.kind) {
                    case Kinds.COLOR:
                        return "vec3";
                    default:
                        throw new Error("toGLSLType: Unhandled kind: " + info.kind);
                }
            case Types.UNDEFINED:
                return "void";
            default:
                throw new Error("toGLSLType: Unhandled type: " + info.type);

        }

    }

    var generate = function (ast, opt) {

        opt = opt || {};


        var lines = [];

        walk.traverse(ast, {
                enter: function (node) {
                    var type = node.type;
                    switch (type) {


                        case Syntax.Program:
                            lines = lines.concat(getHeader(opt));
                            break;


                        case Syntax.FunctionDeclaration:
                            var func = new FunctionAnnotation(node);
                            var methodStart = [toGLSLType(func.getReturnInfo())];
                            methodStart.push(node.id.name, '(');
                            if (!(node.params && node.params.length)) {
                               methodStart.push("void");
                            } else {
                                node.params.forEach(function (param) {
                                    methodStart.push(param.name);
                                })
                            }
                            methodStart.push(') {');
                            lines.push(methodStart.join(" "));
                            return;


                        case Syntax.ReturnStatement:
                            var hasArguments = node.argument;
                            lines.push("return " + (hasArguments ? handleExpression(node.argument) : "") + ";");
                            return;


                        case Syntax.AssignmentExpression:
                            lines.push(handleExpression(node) + ";");
                            return;

                        case Syntax.ExpressionStatement:
                            lines.push(handleExpression(node.expression) + ";");
                            return VisitorOption.Skip;


                        default:
                            console.log("Unhandled: " + type);

                    }
                },
                leave: function (node) {
                    var type = node.type;
                    switch (type) {
                        case Syntax.Program:
                            break;
                        case Syntax.FunctionDeclaration:
                            lines.push("};");
                            break
                    }
                }
            }
        );
        return lines.join("\n");
    }

    /**
     *
     * @param node
     * @returns {string}
     */
    var handleExpression = function(node) {
        var result = "<unhandled>";
        switch(node.type) {
            case Syntax.NewExpression:
                result = toGLSLType(node.extra);
                result += handleArguments(node.arguments);
                break;

            case Syntax.Literal:
                result = node.extra.staticValue;
                break;


            case Syntax.Identifier:
                result = node.name;
                break;

            case Syntax.AssignmentExpression:
                result = handleExpression(node.left);
                result += " " + node.operator + " ";
                result += handleExpression(node.right);
                break;

            case Syntax.CallExpression:
                result = handleExpression(node.callee);
                result += handleArguments(node.arguments);
                break;

            case Syntax.MemberExpression:
                result = handleExpression(node.object);
                result += ".";
                result += handleExpression(node.property);
                break;
            default:
                //console.log("Unhandled: " , node.type);
        }
        return result;
    }

    function handleArguments(container) {
        var result = "(";
        container.forEach(function (arg, index) {
            result += handleExpression(arg);
            if (index < container.length - 1) {
                result += ", ";
            }
        });
        return result + ")";
    }


    exports.generate = generate;


}(exports));
